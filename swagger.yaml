---
openapi: 3.0.0
info:
  title: Personal Book library API
  description: "This is the first professional api project we creating in full-stack army. This is a simple Book library api application where anyone can create a new account, login to their system and create book list that will be visible publicly."
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/v1
    description: Dev
tags:
  - name: Auth
    description: Authentication Endpoints (public)
  - name: Book
    description: Book Endpoints (public + private)
  - name: Review
    description: Review Endpoints (Private)
  - name: User
    description: User Endpoints (admin only)
paths:
  /auth/signup:
    post:
      tags:
        - Auth
      description: create a new account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_signup_body"
      responses:
        "201":
          description: Signup successul
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_201"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
  /auth/signin:
    post:
      tags:
        - Auth
      description: Login to your account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_signin_body"
      responses:
        "200":
          description: Signin successul
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
  /books:
    get:
      tags:
        - Book
      description: Retrive all published Books
      parameters:
        - name: page
          in: query
          description: current page number
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: limit
          in: query
          description: maximum items to be returned
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: sort_type
          in: query
          description: type of sort (asc or dsc)
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: dsc
            enum:
              - asc
              - dsc
        - name: sort_by
          in: query
          description: Sort key
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: updatedAt
        - name: search
          in: query
          description: Search term
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: title
      responses:
        "200":
          description: Return a list of Books
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_1"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
    post:
      tags:
        - Book
      description: Create a new Book
      operationId: createBook
      requestBody:
        description: To create a new Book user must need to provide valid data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/books_body"
      responses:
        "201":
          description: Successfully created a new book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookCreateDTO"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      security:
        - bearerAuth: []
  /books/{id}:
    get:
      tags:
        - Book
      description: Find a single book
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
            example: 1
        - name: expand
          in: query
          description: expand author and review object
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: "author,review"
      responses:
        "200":
          description: Single Book view
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_2"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_404"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
    put:
      tags:
        - Book
      description: Create or update entire book
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/books_id_body"
      responses:
        "200":
          description: Successfully Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookUpdateDTO"
        "201":
          description: Successfully Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookCreateDTO"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Book
      description: Delete a Book by id
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        "204":
          description: Book deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_404"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      security:
        - bearerAuth: []
    patch:
      tags:
        - Book
      description: Partially update an Book
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/books_id_body_1"
      responses:
        "200":
          description: Successfully Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookUpdateDTO"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_404"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      security:
        - bearerAuth: []
components:
  schemas:
    Book:
      allOf:
        - required:
            - authorId
            - body
            - category
            - cover
            - id
            - status
            - title
          type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            title:
              type: string
              example: First Book
            category:
              type: string
              example: programing
            body:
              type: string
              format: text
              example: The body of the first Book
            cover:
              type: string
              format: url
              example: https://s3.aws.example.com/23nds
            status:
              type: string
              example: draft
              enum:
                - draft
                - published
        - $ref: "#/components/schemas/Timestamp"
    BookCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: Book created successfully
        data:
          $ref: "#/components/schemas/Book"
        links:
          $ref: "#/components/schemas/BookCreateDTO_links"
    BookUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Book updated successfully
        data:
          $ref: "#/components/schemas/Book"
        links:
          $ref: "#/components/schemas/BookUpdateDTO_links"
    Review:
      allOf:
        - required:
            - authorId
            - body
            - bookId
            - id
            - status
          type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            bookId:
              type: integer
              format: int32
              example: 1
            body:
              type: string
              format: text
              example: The body of the review
            status:
              type: string
              example: public
              enum:
                - public
                - private
        - $ref: "#/components/schemas/Timestamp"
    Timestamp:
      required:
        - createdAt
        - updatedAt
      type: object
      properties:
        createdAt:
          type: string
          format: datetime
        updatedAt:
          type: string
          format: datetime
    AuthorDTO:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: HM YOUNUS
    Pagination:
      required:
        - limit
        - page
        - totalItems
        - totalPage
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 30
    auth_signup_body:
      required:
        - email
        - name
        - password
      type: object
      properties:
        name:
          type: string
          example: HM YOUNUS
        email:
          type: string
          format: email
          example: hmyounus@example.com
        password:
          type: string
          format: password
          example: hmyounus123
    inline_response_201:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: Signup successful
        data:
          $ref: "#/components/schemas/inline_response_201_data"
        links:
          $ref: "#/components/schemas/inline_response_201_links"
    inline_response_400:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: Bad Request
        data:
          type: array
          items:
            $ref: "#/components/schemas/inline_response_400_data"
    inline_response_500:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 500
        error:
          type: string
          example: Internal Server Error
        message:
          type: string
          example: We are sorry for the inconvenience. Please try again later
    auth_signin_body:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
          example: hmyounus@example.com
        password:
          type: string
          format: password
          example: hmyounus123
    inline_response_200:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Signin successful
        data:
          $ref: "#/components/schemas/inline_response_201_data"
        links:
          $ref: "#/components/schemas/inline_response_200_links"
    inline_response_200_1:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - required:
                  - author
                  - category
                  - id
                  - title
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
                    example: 1
                  title:
                    type: string
                    example: first Book
                  category:
                    type: string
                    example: programing
                  cover:
                    type: string
                    format: url
                    example: https://s3.aws.com/myfirstblog/124.jpg
                  author:
                    $ref: "#/components/schemas/AuthorDTO"
                  link:
                    type: string
                    format: url
                    example: /books/1
              - $ref: "#/components/schemas/Timestamp"
        pagination:
          $ref: "#/components/schemas/Pagination"
        links:
          $ref: "#/components/schemas/inline_response_200_1_links"
    books_body:
      required:
        - body
        - category
        - cover
        - title
      type: object
      properties:
        title:
          type: string
          example: First Book
        category:
          type: string
          example: programing
        body:
          type: string
          format: text
          example: Body of the first Book
        cover:
          type: string
          format: url
          example: https://s3.aws.example.com/23nds
        status:
          type: string
          example: draft
          enum:
            - draft
            - published
    inline_response_401:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 401
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You don't have the right permissions
    inline_response_200_2:
      type: object
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/Book"
            - type: object
              properties:
                author:
                  $ref: "#/components/schemas/AuthorDTO"
            - type: object
              properties:
                reviews:
                  type: array
                  items:
                    $ref: "#/components/schemas/Review"
        links:
          $ref: "#/components/schemas/inline_response_200_2_links"
    inline_response_404:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        error:
          type: string
          example: Not Found
        message:
          type: string
          example: Requested resource not found
    books_id_body:
      required:
        - body
        - category
        - title
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: Book title
        category:
          type: string
          example: Programming
        body:
          type: string
          format: text
          example: Book body
        cover:
          type: string
          format: url
          example: https://s3.aws.myblog.com/221ddw34
        status:
          type: string
          example: draft
          enum:
            - draft
            - published
    books_id_body_1:
      type: object
      properties:
        title:
          type: string
          example: Book title
        category:
          type: string
          example: programming
        body:
          type: string
          format: text
          example: book body
        cover:
          type: string
          format: url
          example: https://s3.aws.myblog.com/221ddw34
        status:
          type: string
          example: draft
          enum:
            - draft
            - published
    BookCreateDTO_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /books/1
        author:
          type: string
          format: url
          example: /books/1/author
        comments:
          type: string
          format: url
          example: /books/1/reviews
    BookUpdateDTO_links:
      type: object
      properties:
        self:
          type: string
          example: /books/1
    inline_response_201_data:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    inline_response_201_links:
      type: object
      properties:
        self:
          type: string
          example: /auth/signup
        signin:
          type: string
          example: /auth/signin
    inline_response_400_data:
      type: object
      properties:
        field:
          type: string
          example: email
        message:
          type: string
          example: Invalid email
        in:
          type: string
          example: body
          enum:
            - query
            - body
    inline_response_200_links:
      type: object
      properties:
        self:
          type: string
          example: /auth/signin
    inline_response_200_1_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /books?page=2&limit=10
        next:
          type: string
          format: url
          example: /books?page=3&limit=10
        prev:
          type: string
          format: url
          example: /books?page=1&limit=10
    inline_response_200_2_links:
      type: object
      properties:
        self:
          type: string
          example: /books/1
        author:
          type: string
          example: /books/1/author
        comments:
          type: string
          example: /books/1/reviews
  responses:
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_500"
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_400"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_401"
    "404":
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_404"
  parameters:
    pageParam:
      name: page
      in: query
      description: current page number
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      name: limit
      in: query
      description: maximum items to be returned
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      name: sort_type
      in: query
      description: type of sort (asc or dsc)
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: dsc
        enum:
          - asc
          - dsc
    sortByParam:
      name: sort_by
      in: query
      description: Sort key
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: updatedAt
    searchParam:
      name: search
      in: query
      description: Search term
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: title
    idPathParam:
      name: id
      in: path
      description: Book ID
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int32
        example: 1
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
